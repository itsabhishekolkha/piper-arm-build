name: Build ARM Binary (Alternative Method) - Using Community Wheels
on:
  workflow_dispatch:
jobs:
  build-arm-alternative:
    runs-on: macos-14  # ARM runner (M1/M2/M3)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        brew install espeak-ng
    
    - name: Create piper-tts-bundle and setup virtual environment
      run: |
        mkdir piper-tts-bundle
        cd piper-tts-bundle
        python3.12 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
    
    - name: Install piper-tts with ARM64 workaround
      run: |
        cd piper-tts-bundle
        source venv/bin/activate
        pip install piper-tts==1.2.0 --no-deps
        pip install numpy>=1.19.0 onnxruntime>=1.10.0 typing-extensions
        pip install piper-phonemize-cross || echo "piper-phonemize-cross not available, continuing without it"
        python -c "from piper import PiperVoice; print('Piper import successful')" || echo "Piper import failed, but continuing..."
    
    - name: Download voice models
      run: |
        cd piper-tts-bundle
        mkdir voices
        cd voices
        curl -L -O https://huggingface.co/rhasspy/piper-voices/resolve/main/en/en_US/lessac/medium/en_US-lessac-medium.onnx
        curl -L -O https://huggingface.co/rhasspy/piper-voices/resolve/main/en/en_US/lessac/medium/en_US-lessac-medium.onnx.json
        cd ..
    
    - name: Create piper_main.py
      run: |
        cd piper-tts-bundle
        cat > piper_main.py << 'EOF'
        import sys
        import wave
        import argparse
        def main():
            parser = argparse.ArgumentParser()
            parser.add_argument("--model", required=True)
            parser.add_argument("--output_file", required=True)
            args = parser.parse_args()
            text = sys.stdin.read().strip()
            if not text:
                print("Error: No input text provided", file=sys.stderr)
                sys.exit(1)
            try:
                from piper import PiperVoice
                voice = PiperVoice.load(args.model)
                with wave.open(args.output_file, "w") as wav_file:
                    voice.synthesize(text, wav_file)
                print(f"Audio successfully generated: {args.output_file}")
            except ImportError as e:
                print(f"Error importing piper: {e}", file=sys.stderr)
                sys.exit(1)
            except Exception as e:
                print(f"Error during synthesis: {e}", file=sys.stderr)
                sys.exit(1)
        if __name__ == "__main__":
            main()
        EOF
    
    - name: Test basic installation
      run: |
        cd piper-tts-bundle
        source venv/bin/activate
        cat > test_piper.py << 'EOF'
        import wave
        from piper import PiperVoice
        model_path = "./voices/en_US-lessac-medium.onnx"
        voice = PiperVoice.load(model_path)
        text = "Hello, this is a test of Piper TTS on your Apple Silicon Mac!"
        with wave.open("output.wav", "w") as wav_file:
            voice.synthesize(text, wav_file)
        print("Audio generated at output.wav")
        EOF
        python3 test_piper.py
        ls -la output.wav
    
    - name: Install PyInstaller and build executable
      run: |
        cd piper-tts-bundle
        source venv/bin/activate
        pip install pyinstaller
        pyinstaller \
          --onefile \
          --name piper \
          --add-data "venv/lib/python3.12/site-packages/piper:piper" \
          --add-data "venv/lib/python3.12/site-packages/piper_phonemize/espeak-ng-data:piper_phonemize/espeak-ng-data" \
          --hidden-import piper \
          --hidden-import piper.voice \
          --hidden-import numpy \
          --hidden-import onnxruntime \
          piper_main.py
        echo "Testing ARM64 build..."
        echo "Test speech for ARM64" | ./dist/piper --model voices/en_US-lessac-medium.onnx --output_file test_arm64.wav
    
    - name: Create Desktop piper folder structure
      run: |
        mkdir -p Desktop/piper/bin Desktop/piper/voices Desktop/piper/lib
        cp piper-tts-bundle/dist/piper Desktop/piper/bin/
        cp piper-tts-bundle/voices/en_US-lessac-medium.onnx Desktop/piper/voices/
        cp piper-tts-bundle/voices/en_US-lessac-medium.onnx.json Desktop/piper/voices/
        cp -r piper-tts-bundle/venv/lib/python3.12/site-packages/piper* Desktop/piper/lib/ 2>/dev/null || echo "Piper libraries copied"
        cp -r piper-tts-bundle/venv/lib/python3.12/site-packages/numpy* Desktop/piper/lib/ 2>/dev/null || echo "Numpy libraries copied"
        cp -r piper-tts-bundle/venv/lib/python3.12/site-packages/onnxruntime* Desktop/piper/lib/ 2>/dev/null || echo "ONNXRuntime libraries copied"
        rm -rf Desktop/piper/lib/pip Desktop/piper/lib/setuptools Desktop/piper/lib/*.dist-info 2>/dev/null || true
    
    - name: Test final piper folder
      run: |
        cd Desktop/piper
        echo "Final test of ARM64 build from piper folder" | ./bin/piper --model voices/en_US-lessac-medium.onnx --output_file final_test_arm64.wav
        ls -la final_test_arm64.wav
    
    - name: Get folder size
      run: |
        echo "Size of piper folder:"
        du -sh Desktop/piper
        echo "Size of executable:"
        ls -lh Desktop/piper/bin/piper
    
    - name: Create archive for upload
      run: |
        cd Desktop
        tar -czf piper-arm-alternative-bundle.tar.gz piper/
        ls -lh piper-arm-alternative-bundle.tar.gz
    
    - name: Upload ARM alternative binary bundle
      uses: actions/upload-artifact@v4
      with:
        name: piper-arm-alternative-bundle
        path: Desktop/piper-arm-alternative-bundle.tar.gz
    
    - name: Upload standalone executable
      uses: actions/upload-artifact@v4
      with:
        name: piper-arm-alternative-executable
        path: piper-tts-bundle/dist/piper
