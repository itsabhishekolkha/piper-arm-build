name: Build ARM Binary

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-arm:
    runs-on: macos-14
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker
      run: |
        # Install Docker if not available
        if ! command -v docker &> /dev/null; then
          brew install --cask docker
        fi
    
    - name: Build with Docker
      run: |
        # Create a Dockerfile for building
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        RUN apt-get update && apt-get install -y \
            build-essential \
            cmake \
            espeak-ng \
            espeak-ng-data \
            libespeak-ng-dev \
            pkg-config \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        COPY . .
        
        RUN pip install --upgrade pip wheel setuptools Cython numpy
        RUN pip install piper-tts==1.2.0
        RUN pip install pyinstaller
        
        CMD ["python", "piper_main.py"]
        EOF
        
        # Build the Docker image
        docker build -t piper-builder .
        
        # Extract the built environment
        docker create --name temp piper-builder
        docker cp temp:/usr/local/lib/python3.11/site-packages ./extracted_packages
        docker rm temp
    
    - name: Install dependencies from extracted packages
      run: |
        python -m pip install --upgrade pip pyinstaller
        # Copy the extracted packages to local Python environment
        cp -r extracted_packages/* $(python -c "import site; print(site.getsitepackages()[0])")/
    
    - name: Find espeak-ng-data path
      id: espeak-path
      run: |
        ESPEAK_PATH=$(python -c "import piper_phonemize; import os; print(os.path.join(os.path.dirname(piper_phonemize.__file__), 'espeak-ng-data'))")
        echo "path=$ESPEAK_PATH" >> $GITHUB_OUTPUT
    
    - name: Build ARM binary
      run: |
        pyinstaller \
          --add-data "${{ steps.espeak-path.outputs.path }}:piper_phonemize/espeak-ng-data" \
          --onefile \
          --name piper-arm \
          piper_main.py
    
    - name: Upload ARM binary
      uses: actions/upload-artifact@v4
      with:
        name: piper-arm-binary
        path: dist/piper-arm
