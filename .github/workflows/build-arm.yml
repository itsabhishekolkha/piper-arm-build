name: Build ARM Binary

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-arm:
    runs-on: macos-14
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Download and extract pre-built Piper binaries
      run: |
        # Download the official pre-built binaries
        curl -L "https://github.com/rhasspy/piper/releases/download/2023.11.14-2/piper_macos_aarch64.tar.gz" -o piper_macos_aarch64.tar.gz
        
        # Extract the binaries
        tar -xzf piper_macos_aarch64.tar.gz
        
        # List contents to see the structure
        echo "=== Piper directory contents ==="
        find piper/ -type f -name "*phonemize*" || echo "No phonemize files found with that pattern"
        find piper/ -type f -name "*.so" || echo "No .so files found"
        find piper/ -type f -name "*.dylib" || echo "No .dylib files found"
        ls -la piper/
        
    - name: Set up Python environment with extracted piper_phonemize
      run: |
        python -m pip install --upgrade pip
        
        # Install basic dependencies
        pip install wheel setuptools
        
        # Create a local site-packages directory
        mkdir -p local_packages
        
        # Copy piper_phonemize from extracted binaries if it exists as a Python package
        if [ -d "piper/lib/python*/site-packages/piper_phonemize" ]; then
          cp -r piper/lib/python*/site-packages/piper_phonemize local_packages/
        elif [ -d "piper/piper_phonemize" ]; then
          cp -r piper/piper_phonemize local_packages/
        else
          echo "Looking for piper_phonemize in other locations..."
          find piper/ -name "*phonemize*" -type d
        fi
        
        # Add local packages to Python path
        echo "$(pwd)/local_packages" > $(python -c "import site; print(site.getsitepackages()[0])")/local_packages.pth
        
    - name: Install remaining dependencies
      run: |
        # Install other dependencies that don't conflict
        pip install numpy torch torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install onnxruntime
        pip install pyinstaller
        
        # Install piper-tts but skip piper-phonemize dependency
        pip install --no-deps piper-tts==1.2.0 || echo "piper-tts install failed, continuing..."
        
    - name: Verify piper_phonemize availability
      run: |
        python -c "
        try:
            import piper_phonemize
            print(f'piper_phonemize imported successfully from: {piper_phonemize.__file__}')
            print(f'piper_phonemize version: {getattr(piper_phonemize, \"__version__\", \"unknown\")}')
        except ImportError as e:
            print(f'Failed to import piper_phonemize: {e}')
            
            # Try to find and manually set up the library
            import os
            import sys
            
            # Look for shared libraries
            for root, dirs, files in os.walk('piper/'):
                for file in files:
                    if 'phonemize' in file and (file.endswith('.so') or file.endswith('.dylib')):
                        print(f'Found phonemize library: {os.path.join(root, file)}')
        "
        
    - name: Create wrapper for piper_phonemize if needed
      run: |
        # If direct import fails, create a wrapper that uses the binary library
        cat > piper_phonemize_wrapper.py << 'EOF'
        import os
        import sys
        import ctypes
        from pathlib import Path
        
        def find_phonemize_lib():
            """Find the piper_phonemize shared library"""
            base_dir = Path(__file__).parent / "piper"
            
            # Look for shared library files
            for ext in ['.dylib', '.so']:
                for lib_file in base_dir.rglob(f"*phonemize*{ext}"):
                    return str(lib_file)
            return None
        
        def load_phonemize():
            """Load the piper_phonemize library"""
            lib_path = find_phonemize_lib()
            if lib_path:
                return ctypes.CDLL(lib_path)
            else:
                raise ImportError("Could not find piper_phonemize library")
        
        # Try to create a basic wrapper
        try:
            lib = load_phonemize()
            print("Successfully loaded piper_phonemize library")
        except Exception as e:
            print(f"Failed to load library: {e}")
        EOF
        
    - name: Find espeak-ng-data path
      id: espeak-path
      run: |
        # Look for espeak-ng-data in the extracted piper directory
        ESPEAK_PATH=""
        if [ -d "piper/espeak-ng-data" ]; then
          ESPEAK_PATH="$(pwd)/piper/espeak-ng-data"
        elif [ -d "piper/lib/espeak-ng-data" ]; then
          ESPEAK_PATH="$(pwd)/piper/lib/espeak-ng-data"
        else
          # Try to find it anywhere in the piper directory
          ESPEAK_PATH=$(find piper/ -name "espeak-ng-data" -type d | head -1)
          if [ -n "$ESPEAK_PATH" ]; then
            ESPEAK_PATH="$(pwd)/$ESPEAK_PATH"
          fi
        fi
        
        if [ -z "$ESPEAK_PATH" ]; then
          echo "espeak-ng-data not found, using system installation"
          brew install espeak-ng
          ESPEAK_PATH="/opt/homebrew/share/espeak-ng-data"
        fi
        
        echo "Using espeak-ng-data from: $ESPEAK_PATH"
        echo "path=$ESPEAK_PATH" >> $GITHUB_OUTPUT
        
    - name: Build ARM binary
      run: |
        # Include the piper directory and local packages in the binary
        pyinstaller \
          --add-data "piper:piper" \
          --add-data "local_packages:." \
          --add-data "${{ steps.espeak-path.outputs.path }}:espeak-ng-data" \
          --onefile \
          --name piper-arm \
          piper_main.py
          
    - name: Test the built binary
      run: |
        # Test if the binary was created successfully
        if [ -f "dist/piper-arm" ]; then
          echo "Binary built successfully"
          file dist/piper-arm
          ls -lh dist/piper-arm
        else
          echo "Binary build failed"
          exit 1
        fi
        
    - name: Upload ARM binary
      uses: actions/upload-artifact@v4
      with:
        name: piper-arm-binary
        path: dist/piper-arm
